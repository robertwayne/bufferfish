{
  "version": 3,
  "sources": ["../src/bufferfish.ts"],
  "sourcesContent": [
    "const OVERFLOW_ERR = \"attempted to read past the end of the Bufferfish\"\n\n/**\n * A wrapper around Uint8Array that provides a simple API for reading and\n * writing binary data. This is meant to be used with its companion library in\n * Rust to provide consistent encoding and decoding interop.\n */\nexport class Bufferfish {\n    private inner: Uint8Array\n    private position: number\n    private reading: boolean\n    private capacity: number\n\n    private textDecoder: TextDecoder | undefined\n    private textEncoder: TextEncoder | undefined\n\n    constructor(bf: ArrayBufferLike = new ArrayBuffer(0)) {\n        this.inner = new Uint8Array(bf)\n        this.position = 0\n        this.reading = false\n        this.capacity = 1024\n\n        this.textDecoder = undefined\n        this.textEncoder = undefined\n    }\n\n    /**\n     * Writes a byte array to the internal buffer. Returns the numbers of bytes\n     * written to the buffer or an error if the capacity is exceeded.\n     *\n     * This should only be called by the library.\n     */\n    private write(bf: Uint8Array): number | Error {\n        if (\n            this.capacity > 0 &&\n            (bf.length > this.capacity ||\n                this.inner.length + bf.length > this.capacity)\n        ) {\n            return new Error(\n                `Bufferfish capacity exceeded (${this.capacity} bytes)`,\n            )\n        }\n\n        this.reading = false\n\n        const tmp = new Uint8Array(this.inner.length + bf.length)\n        tmp.set(this.inner, 0)\n        tmp.set(bf, this.inner.length)\n        this.inner = tmp\n\n        const bytesWritten = bf.length\n        this.position += bytesWritten\n\n        return bytesWritten\n    }\n\n    /**\n     * Returns the (immutable) internal Uint8Array.\n     */\n    public view = (): Uint8Array => {\n        return this.inner.slice()\n    }\n\n    /**\n     * Resets the buffer cursor to the start postion when reading after a write.\n     *\n     * This should only be called by the library.\n     */\n    private startReading(): void {\n        if (this.reading) {\n            return\n        }\n\n        this.position = 0\n        this.reading = true\n    }\n\n    /**\n     * Sets the max capacity (in bytes) for the internal buffer.\n     * A value of 0 will allow the buffer to grow indefinitely.\n     */\n    public setMaxCapacity(capacity: number): void {\n        this.capacity = capacity\n    }\n\n    /**\n     * Returns the next byte in the buffer without advancing the cursor.\n     *\n     * Throws if the cursor is at the end of the buffer.\n     */\n    public peek = (): number | Error => {\n        this.startReading()\n\n        const value = this.inner.slice(this.position, this.position + 1)[0]\n\n        if (this.position >= this.inner.length || value === undefined) {\n            return new Error(\n                `peek of 1 byte exceeds the max capacity of ${this.capacity} bytes on this Bufferfish`,\n            )\n        }\n\n        return value\n    }\n\n    /**\n     * Returns the next n bytes in the buffer without advancing the cursor.\n     * Returns undefined if the cursor is at the end of the buffer.\n     */\n    public peekN = (n: number): Uint8Array | Error => {\n        this.startReading()\n\n        const value = this.inner.slice(this.position, this.position + n)\n\n        if (this.position + n > this.inner.length) {\n            return new Error(\n                `peek of ${n} bytes exceeds the max capacity of ${this.capacity} bytes on this Bufferfish`,\n            )\n        }\n\n        return value\n    }\n\n    /**\n     * Appends another `Bufferfish`, `Uint8Array`, `ArrayBuffer`, or `Array<number>` to the buffer. This modifies the `Bufferfish` in-place.\n     */\n    public push = (\n        arr: Bufferfish | Uint8Array | ArrayBuffer | Array<number>,\n    ): void | Error => {\n        if (arr instanceof Bufferfish) {\n            const err = this.write(arr.view())\n            if (err instanceof Error) {\n                return err\n            }\n        } else if (arr instanceof Uint8Array) {\n            const err = this.write(arr)\n            if (err instanceof Error) {\n                return err\n            }\n        } else if (arr instanceof ArrayBuffer) {\n            const err = this.write(new Uint8Array(arr))\n            if (err instanceof Error) {\n                return err\n            }\n        } else if (arr instanceof Array) {\n            const err = this.write(new Uint8Array(arr))\n            if (err instanceof Error) {\n                return err\n            }\n        } else {\n            return new Error(\"invalid type\")\n        }\n    }\n\n    /**\n     * Writes a single u8 to the buffer as one byte.\n     *\n     * Returns an error if the value is out of range (0-255).\n     */\n    public writeUint8 = (value: number): void | Error => {\n        if (value > 255 || value < 0) {\n            return new Error(`value ${value} must be between 0 and 255`)\n        }\n\n        const slice: Uint8Array = new Uint8Array(1)\n        const view = new DataView(slice.buffer)\n        view.setUint8(0, value)\n\n        const err = this.write(slice)\n        if (err instanceof Error) {\n            return err\n        }\n    }\n\n    /**\n     * Writes a u16 to the buffer as two bytes.\n     *\n     * Returns an error if the value is out of range (0-65535).\n     */\n    public writeUint16 = (value: number): void | Error => {\n        if (value > 65535 || value < 0) {\n            return new Error(`value ${value} must be between 0 and 65535`)\n        }\n\n        const slice: Uint8Array = new Uint8Array(2)\n        const view = new DataView(slice.buffer)\n        view.setUint16(0, value)\n\n        const err = this.write(slice)\n        if (err instanceof Error) {\n            return err\n        }\n    }\n\n    /**\n     * Writes a u32 to the buffer as four bytes.\n     *\n     * Returns an error if the value is out of range (0-4294967295).\n     */\n    public writeUint32 = (value: number): void | Error => {\n        if (value > 4294967295 || value < 0) {\n            return new Error(`value ${value} must be between 0 and 4294967295`)\n        }\n\n        const slice: Uint8Array = new Uint8Array(4)\n        const view = new DataView(slice.buffer)\n        view.setUint32(0, value)\n\n        const err = this.write(slice)\n        if (err instanceof Error) {\n            return err\n        }\n    }\n\n    /**\n     * Writes an i8 to the buffer as one byte.\n     *\n     * Returns an error if the value is out of range (-128-127).\n     */\n    public writeInt8 = (value: number): void | Error => {\n        if (value > 127 || value < -128) {\n            return new Error(`value ${value} must be between -128 and 127`)\n        }\n\n        const slice: Uint8Array = new Uint8Array(1)\n        const view = new DataView(slice.buffer)\n        view.setInt8(0, value)\n\n        const err = this.write(slice)\n        if (err instanceof Error) {\n            return err\n        }\n    }\n\n    /**\n     * Writes an i16 to the buffer as two bytes.\n     *\n     * Returns an error if the value is out of range (-32768-32767).\n     */\n    public writeInt16 = (value: number): void | Error => {\n        if (value > 32767 || value < -32768) {\n            return new Error(`value ${value} must be between -32768 and 32767`)\n        }\n\n        const slice: Uint8Array = new Uint8Array(2)\n        const view = new DataView(slice.buffer)\n        view.setInt16(0, value)\n\n        const err = this.write(slice)\n        if (err instanceof Error) {\n            return err\n        }\n    }\n\n    /**\n     * Writes an i32 to the buffer as four bytes.\n     *\n     * Returns an error if the value is out of range (-2147483648-2147483647).\n     */\n    public writeInt32 = (value: number): void | Error => {\n        if (value > 2147483647 || value < -2147483648) {\n            return new Error(\n                `value ${value} must be between -2147483648 and 2147483647`,\n            )\n        }\n\n        const slice: Uint8Array = new Uint8Array(4)\n        const view = new DataView(slice.buffer)\n        view.setInt32(0, value)\n\n        const err = this.write(slice)\n        if (err instanceof Error) {\n            return err\n        }\n    }\n\n    /**\n     * Writes a boolean to the buffer as one byte.\n     */\n    public writeBool = (value: boolean): void | Error => {\n        const err = this.writeUint8(value ? 1 : 0)\n        if (err instanceof Error) {\n            return err\n        }\n    }\n\n    /**\n     * Writes a packed array of booleans to the buffer as a single byte.\n     * Can pack up to 8 booleans into a single byte.\n     */\n    public writePackedBools = (values: Array<boolean>): void | Error => {\n        if (values.length > 8) {\n            return new Error(\"cannot pack more than 8 bools into a single byte\")\n        }\n\n        let packedValue = 0x00\n        for (const value of values) {\n            packedValue <<= 1\n            if (value) {\n                packedValue |= 1\n            }\n        }\n\n        packedValue <<= 8 - values.length // Shift remaining bits to the left to fill the byte\n\n        const err = this.writeUint8(packedValue)\n        if (err instanceof Error) {\n            return err\n        }\n    }\n\n    /**\n     * Writes a unicode string literal to the buffer. It will be prefixed with\n     * its length in bytes as a u16 (two bytes), and each character will be 1 to\n     * 4-bytes, whichever is the smallest it can fit into.\n     */\n    public writeString = (value: string): void | Error => {\n        if (!this.textEncoder) this.textEncoder = new TextEncoder()\n        const slice: Uint8Array = this.textEncoder.encode(value)\n\n        const err = this.writeUint16(slice.length)\n        if (err instanceof Error) {\n            return err\n        }\n\n        const err2 = this.write(slice)\n        if (err2 instanceof Error) {\n            return err2\n        }\n    }\n\n    /**\n     * Writes an array of raw bytes to the buffer. Useful for encoding\n     * distinct structs into byte arrays and appending them to a buffer later.\n     */\n    public writeRawBytes = (value: Uint8Array): void | Error => {\n        const err = this.write(value)\n        if (err instanceof Error) {\n            return err\n        }\n    }\n\n    /**\n     * Attempts to read a u8 from the buffer.\n     */\n    public readUint8(): number | Error {\n        this.startReading()\n\n        if (this.position + 1 > this.inner.length) {\n            return new Error(OVERFLOW_ERR)\n        }\n\n        const value = new DataView(\n            this.inner.buffer,\n            this.position,\n            1,\n        ).getUint8(0)\n        this.position += 1\n\n        return value\n    }\n\n    /**\n     * Attempts to read a u16 from the buffer.\n     */\n    public readUint16(): number | Error {\n        this.startReading()\n\n        if (this.position + 2 > this.inner.length) {\n            return new Error(OVERFLOW_ERR)\n        }\n\n        const value = new DataView(\n            this.inner.buffer,\n            this.position,\n            2,\n        ).getUint16(0)\n        this.position += 2\n\n        return value\n    }\n\n    /**\n     * Attempts to read a u32 from the buffer.\n     */\n    public readUint32(): number | Error {\n        this.startReading()\n\n        if (this.position + 4 > this.inner.length) {\n            return new Error(OVERFLOW_ERR)\n        }\n\n        const value = new DataView(\n            this.inner.buffer,\n            this.position,\n            4,\n        ).getUint32(0)\n        this.position += 4\n\n        return value\n    }\n\n    /**\n     * Attempts to read an i8 from the buffer.\n     */\n    public readInt8(): number | Error {\n        this.startReading()\n\n        if (this.position + 1 > this.inner.length) {\n            return new Error(OVERFLOW_ERR)\n        }\n\n        const value = new DataView(this.inner.buffer, this.position, 1).getInt8(\n            0,\n        )\n        this.position += 1\n\n        return value\n    }\n\n    /**\n     * Attempts to read an i16 from the buffer.\n     */\n    public readInt16(): number | Error {\n        this.startReading()\n\n        if (this.position + 2 > this.inner.length) {\n            return new Error(OVERFLOW_ERR)\n        }\n\n        const value = new DataView(\n            this.inner.buffer,\n            this.position,\n            2,\n        ).getInt16(0)\n        this.position += 2\n\n        return value\n    }\n\n    /**\n     * Attempts to read an i32 from the buffer.\n     */\n    public readInt32(): number | Error {\n        this.startReading()\n\n        if (this.position + 4 > this.inner.length) {\n            return new Error(OVERFLOW_ERR)\n        }\n\n        const value = new DataView(\n            this.inner.buffer,\n            this.position,\n            4,\n        ).getInt32(0)\n        this.position += 4\n\n        return value\n    }\n\n    /**\n     * Attempts to read a bool from the buffer.\n     */\n    public readBool(): boolean | Error {\n        const valueOrError = this.readUint8()\n        if (valueOrError instanceof Error) {\n            return valueOrError\n        }\n\n        return valueOrError === 1\n    }\n\n    /**\n     * Attempts to read a packed array of booleans from the buffer.\n     * By default, it will read 8 booleans from a single byte. If you\n     * packed less than 8, the count parameter can be used to specify\n     * how many booleans to read.\n     */\n    public readPackedBools(count: number = 8): Array<boolean> | Error {\n        if (count > 8) {\n            return new Error(\"cannot read more than 8 bools from a single byte\")\n        }\n\n        const packedValueOrError = this.readUint8()\n        if (packedValueOrError instanceof Error) {\n            return packedValueOrError\n        }\n\n        const packedValue = packedValueOrError as number\n        const bools: Array<boolean> = []\n        for (let i = 0; i < count; i++) {\n            bools.push((packedValue & (1 << (7 - i))) !== 0)\n        }\n\n        return bools\n    }\n\n    /**\n     * Attempts to read a variable length string from the buffer.\n     */\n    public readString(): string | Error {\n        const lengthOrError = this.readUint16()\n        if (lengthOrError instanceof Error) {\n            return lengthOrError\n        }\n\n        const length = lengthOrError as number\n        if (this.position + length > this.inner.length) {\n            return new Error(OVERFLOW_ERR)\n        }\n\n        if (!this.textDecoder) this.textDecoder = new TextDecoder(\"utf-8\")\n\n        const value = this.textDecoder.decode(\n            this.inner.subarray(this.position, this.position + length),\n        )\n        this.position += length\n\n        return value\n    }\n\n    /**\n     * Attempts to read a variable-length array of elements from the buffer.\n     */\n    public readArray<T>(readFn: () => T): Array<T> | Error {\n        const lengthOrError = this.readUint16()\n        if (lengthOrError instanceof Error) {\n            return lengthOrError\n        }\n\n        const length = lengthOrError as number\n        const values: Array<T> = []\n        for (let i = 0; i < length; i++) {\n            const valueOrError = readFn()\n            if (valueOrError instanceof Error) {\n                return valueOrError\n            }\n\n            values.push(valueOrError as T)\n        }\n\n        return values\n    }\n}\n"
  ],
  "mappings": "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",
  "debugId": "B3DE3A8557E13BF664756E2164756E21",
  "names": []
}