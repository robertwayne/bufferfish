import argparse


def main(args):
    current_value = 0
    variant_lines = []
    inside_enum = False

    with open(args.input, "r") as file:
        lines = file.read()

        for line in lines.split("\n"):
            line = line.strip()

            if line.startswith("}"):
                break

            if line.startswith("pub enum PacketId {"):
                inside_enum = True
                continue

            if not inside_enum:
                continue

            line = line.replace(",", "").split("=")
            variant = line[0].strip()
            explicit_value = line[1].strip() if len(line) > 1 else None

            variant_lines.append(
                f"\t{variant} = {explicit_value if explicit_value else current_value}"
            )

            current_value += 1

    lines = ",\n".join(variant_lines)
    lines += ","  # Trailing comma

    with open(args.output, "w") as file:
        file.write("/* AUTOGENERATED BUFFERFISH FILE, DO NOT EDIT */\n\n")
        file.write(
            "/* Make sure your bundler is configured to inline TypeScript enums in order to avoid bloated codegen from the default TypeScript enum behaviour. */\n"
        )
        file.write("export enum PacketId {\n")
        file.write(lines)
        file.write("\n}\n")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "-i",
        "--input",
        help="Path to the Rust input file.",
        default="server/src/packet_id.rs",
    )

    parser.add_argument(
        "-o",
        "--output",
        help="Path of the generated TypeScript file.",
        default="client/src/PacketId.ts",
    )

    main(parser.parse_args())
